syntax = "proto2";

message ECommerceEvent {
    message Category {
        repeated bytes path = 1; // Up to 5 elements
    }

    message Payload {

        message Pair {
            optional bytes key = 1;
            optional bytes value = 2;
        }

        repeated Pair pairs = 1;
        optional uint32 truncated_pairs_count = 2 [default = 0];
    }

    message Screen {
        optional bytes name = 1;
        optional Category category = 2;
        optional bytes search_query = 3;
        optional Payload payload = 4;
    }

    message Decimal {
        optional int64 mantissa = 1 [default = 0]; // Decimal value mantissa(signed)
        optional int32 exponent = 2 [default = 0]; // Decimal value exponent(aka scale)
    }

    message Amount {
        optional bytes unit_type = 1; // Currency for money(BYN, RUB, USD). Unit type for internal components(wood, gold)
        optional Decimal value = 2;
    }

    message Price {
        optional Amount fiat = 1;
        repeated Amount internal_components = 2;
    }

    message PromoCode {
        optional bytes code = 1;
    }

    message Product {
        optional bytes sku = 1;
        optional bytes name = 2;
        optional Category category = 3;

        optional Payload payload = 4;

        optional Price actual_price = 5;
        optional Price original_price = 6;
        repeated PromoCode promo_codes = 7;
    }

    message Referrer {
        optional bytes type = 1;
        optional bytes id = 2;
        optional Screen screen = 3;
    }

    message CartItem {
        optional Product product = 1;
        optional Referrer referrer = 2;
        optional Decimal quantity = 3;
        optional Price revenue = 4;
    }

    message OrderCartItem {
        optional uint32 number_in_cart = 1 [default = 0]; // For sorting and consistency check. Used for `items` in Order.
        optional CartItem item = 2;
    }

    message Order {
        optional bytes uuid = 1; // Unique identifier of order generated by SDK (UUID v4).
        optional bytes order_id = 2; // Identifier of the order, provided by app developer.
        optional Payload payload = 3;

        repeated OrderCartItem items = 4;
        optional uint32 total_items_count = 5 [default = 0]; // In case of split of order items into several events.
    }

    // - Event Value Parts (based on e-commerce event type) -

    message ShownScreenInfo {
        optional Screen screen = 1;
    }

    message ShownProductCardInfo {
        optional Product product = 1;
        optional Screen screen = 2;
    }

    message ShownProductDetailsInfo {
        optional Product product = 1;
        optional Referrer referrer = 2;
    }

    message CartActionInfo {
        optional CartItem item = 1;
    }

    message OrderInfo {
        optional Order order = 1;
    }

    // - Event Value -

    enum ECommerceEventType {
        ECOMMERCE_EVENT_TYPE_UNDEFINED = 0;
        ECOMMERCE_EVENT_TYPE_SHOW_SCREEN = 1; // (see shown_screen_info)
        ECOMMERCE_EVENT_TYPE_SHOW_PRODUCT_CARD = 2; // (see shown_product_card_info)

        ECOMMERCE_EVENT_TYPE_SHOW_PRODUCT_DETAILS = 3; // (see shown_product_details_info)
        ECOMMERCE_EVENT_TYPE_ADD_TO_CART = 4; // (see cart_action_info)
        ECOMMERCE_EVENT_TYPE_REMOVE_FROM_CART = 5; // (see cart_action_info)
        ECOMMERCE_EVENT_TYPE_BEGIN_CHECKOUT = 6; // (see order_info)
        ECOMMERCE_EVENT_TYPE_PURCHASE = 7; // (see order_info)
    }

    optional ECommerceEventType type = 1 [default = ECOMMERCE_EVENT_TYPE_UNDEFINED];

    optional ShownScreenInfo shown_screen_info = 2; // type = ECOMMERCE_EVENT_TYPE_SHOW_SCREEN
    optional ShownProductCardInfo shown_product_card_info = 3; // type = ECOMMERCE_EVENT_TYPE_SHOW_PRODUCT_CARD
    optional ShownProductDetailsInfo shown_product_details_info = 4; // type = ECOMMERCE_EVENT_TYPE_SHOW_PRODUCT_DETAILS
    optional CartActionInfo cart_action_info = 5; // type = ECOMMERCE_EVENT_TYPE_ADD_TO_CART | ECOMMERCE_EVENT_TYPE_REMOVE_FROM_CART
    optional OrderInfo order_info = 6; // type = ECOMMERCE_EVENT_TYPE_BEGIN_CHECKOUT | ECOMMERCE_EVENT_TYPE_PURCHASE
}
