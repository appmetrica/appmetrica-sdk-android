// Generated by the protocol buffer compiler.  DO NOT EDIT!

package io.appmetrica.analytics.impl.protobuf.client;

@SuppressWarnings("hiding")
public interface Eventhashes {

  public static final class EventHashes extends
      io.appmetrica.analytics.protobuf.nano.MessageNano {

    private static volatile EventHashes[] _emptyArray;
    public static EventHashes[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            io.appmetrica.analytics.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new EventHashes[0];
          }
        }
      }
      return _emptyArray;
    }

    // required bool treatUnknownEventAsNew = 1;
    public boolean treatUnknownEventAsNew;

    // required uint32 lastVersionCode = 2;
    public int lastVersionCode;

    // required uint32 hashesCountFromPreviousVersion = 3;
    public int hashesCountFromPreviousVersion;

    // repeated int32 eventNameHashes = 4;
    public int[] eventNameHashes;

    public EventHashes() {
      clear();
    }

    public EventHashes clear() {
      treatUnknownEventAsNew = false;
      lastVersionCode = 0;
      hashesCountFromPreviousVersion = 0;
      eventNameHashes = io.appmetrica.analytics.protobuf.nano.WireFormatNano.EMPTY_INT_ARRAY;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(io.appmetrica.analytics.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      output.writeBool(1, this.treatUnknownEventAsNew);
      output.writeUInt32(2, this.lastVersionCode);
      output.writeUInt32(3, this.hashesCountFromPreviousVersion);
      if (this.eventNameHashes != null && this.eventNameHashes.length > 0) {
        for (int i = 0; i < this.eventNameHashes.length; i++) {
          output.writeInt32(4, this.eventNameHashes[i]);
        }
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      size += io.appmetrica.analytics.protobuf.nano.CodedOutputByteBufferNano
          .computeBoolSize(1, this.treatUnknownEventAsNew);
      size += io.appmetrica.analytics.protobuf.nano.CodedOutputByteBufferNano
          .computeUInt32Size(2, this.lastVersionCode);
      size += io.appmetrica.analytics.protobuf.nano.CodedOutputByteBufferNano
          .computeUInt32Size(3, this.hashesCountFromPreviousVersion);
      if (this.eventNameHashes != null && this.eventNameHashes.length > 0) {
        int dataSize = 0;
        for (int i = 0; i < this.eventNameHashes.length; i++) {
          int element = this.eventNameHashes[i];
          dataSize += io.appmetrica.analytics.protobuf.nano.CodedOutputByteBufferNano
              .computeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * this.eventNameHashes.length;
      }
      return size;
    }

    @Override
    public EventHashes mergeFrom(
            io.appmetrica.analytics.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!io.appmetrica.analytics.protobuf.nano.WireFormatNano.parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            this.treatUnknownEventAsNew = input.readBool();
            break;
          }
          case 16: {
            this.lastVersionCode = input.readUInt32();
            break;
          }
          case 24: {
            this.hashesCountFromPreviousVersion = input.readUInt32();
            break;
          }
          case 32: {
            int arrayLength = io.appmetrica.analytics.protobuf.nano.WireFormatNano
                .getRepeatedFieldArrayLength(input, 32);
            int i = this.eventNameHashes == null ? 0 : this.eventNameHashes.length;
            int[] newArray = new int[i + arrayLength];
            if (i != 0) {
              java.lang.System.arraycopy(this.eventNameHashes, 0, newArray, 0, i);
            }
            for (; i < newArray.length - 1; i++) {
              newArray[i] = input.readInt32();
              input.readTag();
            }
            // Last one without readTag.
            newArray[i] = input.readInt32();
            this.eventNameHashes = newArray;
            break;
          }
          case 34: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            // First pass to compute array length.
            int arrayLength = 0;
            int startPos = input.getPosition();
            while (input.getBytesUntilLimit() > 0) {
              input.readInt32();
              arrayLength++;
            }
            input.rewindToPosition(startPos);
            int i = this.eventNameHashes == null ? 0 : this.eventNameHashes.length;
            int[] newArray = new int[i + arrayLength];
            if (i != 0) {
              java.lang.System.arraycopy(this.eventNameHashes, 0, newArray, 0, i);
            }
            for (; i < newArray.length; i++) {
              newArray[i] = input.readInt32();
            }
            this.eventNameHashes = newArray;
            input.popLimit(limit);
            break;
          }
        }
      }
    }

    public static EventHashes parseFrom(byte[] data)
        throws io.appmetrica.analytics.protobuf.nano.InvalidProtocolBufferNanoException {
      return io.appmetrica.analytics.protobuf.nano.MessageNano.mergeFrom(new EventHashes(), data);
    }

    public static EventHashes parseFrom(
            io.appmetrica.analytics.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new EventHashes().mergeFrom(input);
    }
  }
}
