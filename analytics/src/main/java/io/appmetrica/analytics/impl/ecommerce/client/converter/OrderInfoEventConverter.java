package io.appmetrica.analytics.impl.ecommerce.client.converter;

import androidx.annotation.NonNull;
import androidx.annotation.VisibleForTesting;
import io.appmetrica.analytics.coreutils.internal.StringUtils;
import io.appmetrica.analytics.impl.ecommerce.ECommerceConstants;
import io.appmetrica.analytics.impl.ecommerce.client.model.CartItemWrapper;
import io.appmetrica.analytics.impl.ecommerce.client.model.OrderInfoEvent;
import io.appmetrica.analytics.impl.ecommerce.client.model.OrderWrapper;
import io.appmetrica.analytics.impl.protobuf.backend.Ecommerce;
import io.appmetrica.analytics.impl.utils.limitation.BytesTruncatedInfo;
import io.appmetrica.analytics.impl.utils.limitation.BytesTruncatedProvider;
import io.appmetrica.analytics.impl.utils.limitation.TrimmingResult;
import io.appmetrica.analytics.impl.utils.limitation.hierarchical.HierarchicalStringTrimmer;
import io.appmetrica.analytics.logger.internal.YLogger;
import java.util.ArrayList;
import java.util.List;

public class OrderInfoEventConverter implements ECommerceEventConverter<OrderInfoEvent> {

    private static final String TAG = "[OrderInfoConverter]";

    @NonNull
    private final PayloadConverter payloadConverter;
    @NonNull
    private final CartItemConverter cartItemConverter;
    @NonNull
    private final HierarchicalStringTrimmer orderIdentifierTrimmer;
    @NonNull
    private final ProtoMessageSizeCalculator protoMessageSizeCalculator;

    public OrderInfoEventConverter() {
        this(
                new PayloadConverter(),
                new CartItemConverter(),
                new HierarchicalStringTrimmer(Limits.ORDER_ID_LENGTH),
                new ProtoMessageSizeCalculator()
        );
    }

    @NonNull
    @Override
    public List<Result<Ecommerce.ECommerceEvent, BytesTruncatedProvider>> fromModel(@NonNull OrderInfoEvent value) {
        Ecommerce.ECommerceEvent proto = new Ecommerce.ECommerceEvent();
        proto.type = value.eventType;
        proto.orderInfo = new Ecommerce.ECommerceEvent.OrderInfo();

        OrderWrapper orderWrapper = value.order;
        Ecommerce.ECommerceEvent.Order orderProto = new Ecommerce.ECommerceEvent.Order();
        //generated by SDK, so no need trim
        orderProto.uuid = StringUtils.getUTF8Bytes(orderWrapper.uuid);

        TrimmingResult<String, BytesTruncatedProvider> identifierTrimmingResult =
                orderIdentifierTrimmer.trim(orderWrapper.identifier);
        orderProto.orderId = StringUtils.getUTF8Bytes(identifierTrimmingResult.value);

        orderProto.totalItemsCount = orderWrapper.cartItems.size();

        Result<Ecommerce.ECommerceEvent.Payload, BytesTruncatedProvider> payloadResult = null;
        if (orderWrapper.payload != null) {
            payloadResult = payloadConverter.fromModel(orderWrapper.payload);
            orderProto.payload = payloadResult.result;
        }

        proto.orderInfo.order = orderProto;

        BytesTruncatedProvider totalTruncationInfo = BytesTruncatedInfo.total(identifierTrimmingResult, payloadResult);

        YLogger.debug(
                ECommerceConstants.FEATURE_TAG + TAG,
                "Order template summary info: total cartItems = %d; order without items bytes truncated " +
                        "(orderId + payload) = %d(%d + %d)",
                orderProto.totalItemsCount,
                totalTruncationInfo.getBytesTruncated(),
                identifierTrimmingResult.getBytesTruncated(),
                payloadResult == null ? 0 : payloadResult.getBytesTruncated()
        );

        return toProtoDependsOnSizeLimit(proto, totalTruncationInfo, orderWrapper.cartItems);
    }

    private List<Result<Ecommerce.ECommerceEvent, BytesTruncatedProvider>> toProtoDependsOnSizeLimit(
            @NonNull Ecommerce.ECommerceEvent template,
            BytesTruncatedProvider templateBytesTruncated,
            List<CartItemWrapper> cartItems
    ) {
        List<Result<Ecommerce.ECommerceEvent, BytesTruncatedProvider>> results =
                new ArrayList<Result<Ecommerce.ECommerceEvent, BytesTruncatedProvider>>();
        int templateSize = protoMessageSizeCalculator.computeAdditionalNestedSize(template);
        YLogger.debug(ECommerceConstants.FEATURE_TAG + TAG, "Total order info template size = %d", templateSize);
        List<Ecommerce.ECommerceEvent.OrderCartItem> currentEventCartItemsList =
                new ArrayList<Ecommerce.ECommerceEvent.OrderCartItem>();
        Ecommerce.ECommerceEvent currentEvent = copyFromTemplate(template);
        BytesTruncatedProvider currentBytesTruncated = templateBytesTruncated;
        int currentSize = templateSize;

        for (int i = 0; i < cartItems.size(); i++) {
            Result<Ecommerce.ECommerceEvent.OrderCartItem, BytesTruncatedProvider> item =
                    cartItemToProto(cartItems.get(i), i);
            int itemSize = protoMessageSizeCalculator.computeAdditionalNestedSize(item.result);
            if (currentEventCartItemsList.size() != 0 && currentSize + itemSize > Limits.TOTAL_ECOMMERCE_PROTO) {
                currentEvent.orderInfo.order.items = toArray(currentEventCartItemsList);
                YLogger.debug(
                        ECommerceConstants.FEATURE_TAG + TAG,
                        "Current order event limit reached: currentEventSize + nextItemSize > TOTAL LIMIT: " +
                                "(%d + %d > %d). Cart items count = %d; currentBytesTruncated = %d",
                        currentSize, itemSize, Limits.TOTAL_ECOMMERCE_PROTO, currentEventCartItemsList.size(),
                        currentBytesTruncated
                        );
                currentEventCartItemsList = new ArrayList<Ecommerce.ECommerceEvent.OrderCartItem>();
                results.add(new Result<Ecommerce.ECommerceEvent, BytesTruncatedProvider>(
                        currentEvent,
                        currentBytesTruncated
                ));
                currentEvent = copyFromTemplate(template);
                currentBytesTruncated = templateBytesTruncated;
                currentSize = templateSize;
            }
            currentEventCartItemsList.add(item.result);
            currentBytesTruncated = BytesTruncatedInfo.total(currentBytesTruncated, item.metaInfo);
            currentSize += itemSize;
        }
        YLogger.debug(
                ECommerceConstants.FEATURE_TAG + TAG,
                "Final part of orderEvent: cartItemsCount = %d; bytesTruncated = %d",
                currentEventCartItemsList.size(), currentBytesTruncated.getBytesTruncated()
        );
        currentEvent.orderInfo.order.items = toArray(currentEventCartItemsList);
        results.add(new Result<Ecommerce.ECommerceEvent, BytesTruncatedProvider>(currentEvent, currentBytesTruncated));

        return results;
    }

    private Ecommerce.ECommerceEvent.OrderCartItem[] toArray(List<Ecommerce.ECommerceEvent.OrderCartItem> list) {
        return list.toArray(new Ecommerce.ECommerceEvent.OrderCartItem[list.size()]);
    }

    private Result<Ecommerce.ECommerceEvent.OrderCartItem, BytesTruncatedProvider> cartItemToProto(
            @NonNull CartItemWrapper input,
            int numberInCart
    ) {
        Ecommerce.ECommerceEvent.OrderCartItem orderCartItemProto = new Ecommerce.ECommerceEvent.OrderCartItem();
        orderCartItemProto.numberInCart = numberInCart;

        Result<Ecommerce.ECommerceEvent.CartItem, BytesTruncatedProvider> cartItemConvertingResult =
                cartItemConverter.fromModel(input);
        orderCartItemProto.item = cartItemConvertingResult.result;

        if (YLogger.DEBUG && cartItemConvertingResult.getBytesTruncated() > 0) {
            YLogger.debug(
                    ECommerceConstants.FEATURE_TAG + TAG,
                    "Cart item #%d has bytes_truncated = %d",
                    numberInCart, cartItemConvertingResult.getBytesTruncated()
            );
        }

        return new Result<Ecommerce.ECommerceEvent.OrderCartItem, BytesTruncatedProvider>(
                orderCartItemProto,
                cartItemConvertingResult
        );
    }

    private Ecommerce.ECommerceEvent copyFromTemplate(@NonNull Ecommerce.ECommerceEvent eCommerceEvent) {
        Ecommerce.ECommerceEvent copy = new Ecommerce.ECommerceEvent();
        copy.type = eCommerceEvent.type;
        copy.orderInfo = new Ecommerce.ECommerceEvent.OrderInfo();
        copy.orderInfo.order = new Ecommerce.ECommerceEvent.Order();
        copy.orderInfo.order.orderId = eCommerceEvent.orderInfo.order.orderId;
        copy.orderInfo.order.uuid = eCommerceEvent.orderInfo.order.uuid;
        copy.orderInfo.order.totalItemsCount = eCommerceEvent.orderInfo.order.totalItemsCount;
        copy.orderInfo.order.payload = eCommerceEvent.orderInfo.order.payload;

        return copy;
    }

    @NonNull
    @Override
    public OrderInfoEvent toModel(@NonNull List<Result<Ecommerce.ECommerceEvent, BytesTruncatedProvider>> nano) {
        throw new UnsupportedOperationException();
    }

    @VisibleForTesting
    OrderInfoEventConverter(@NonNull PayloadConverter payloadConverter,
                            @NonNull CartItemConverter cartItemConverter,
                            @NonNull HierarchicalStringTrimmer orderIdentifierTrimmer,
                            @NonNull ProtoMessageSizeCalculator protoMessageSizeCalculator) {
        this.payloadConverter = payloadConverter;
        this.cartItemConverter = cartItemConverter;
        this.orderIdentifierTrimmer = orderIdentifierTrimmer;
        this.protoMessageSizeCalculator = protoMessageSizeCalculator;
    }
}
